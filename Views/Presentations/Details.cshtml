@model PresentationMeetup.Data.Presentation

@{
	ViewData["Title"] = "Presentation Editor";
}

<div class="row">
	<div class="col-md-10 p-4 pe-2" style="background: #00c8c80a; border-radius: 5px;">
		<div class="container">
			<input asp-for="PresentationId" type="hidden" id="presentation-id" />
			<h4 style="font-family: kingslanding; font-size: 30px; font-weight: bold;">
				@Model.Title?.ToUpper()
				<span class="" style="color: gray; font-size: 20px;">--by @Model.Creator</span>
			</h4>

			<div class="row m-0">
				<div class="col-md-8 action-bar">
					<p class="m-0">Customize</p>
					@* <button class="btn editor-btn" onclick="loadSlide()" title="Add New Slide"><img src="~/images/add.png" width="20" /></button> *@
					<button class="btn editor-btn" onclick="addTextBlock()" title="Add Textbox"><img src="~/images/textbox.png" width="20" /></button>
					<button class="btn editor-btn" onclick="addRectangle()" title="Add Rectangle"><img src="~/images/square.png" width="20" /></button>
					<button class="btn editor-btn" onclick="addCircle()" title="Add Circle"><img src="~/images/circle.png" width="20" /></button>
					<button class="btn editor-btn" onclick="addArrow()" title="Add Arrow"><img src="~/images/arrow.png" width="20" /></button>
					<button class="btn editor-btn" onclick="zoomIn()" title="Zoom In"><img src="~/images/zoomin.png" width="20" /></button>
					<button class="btn editor-btn" onclick="zoomOut()" title="Zoom Out"><img src="~/images/zoomout.png" width="20" /></button>

					<input type="file" id="imageUploader" class="btn editor-btn" />
				</div>

				<div class="col-md-4 action-bar">
					<p class="m-0">Actions</p>
					<button class="btn btn-danger" onclick="clearCanvas()" title="Clear Canvas"><img src="~/images/clearall.png" width="20" /> Clear Canvas</button>
					<button class="btn btn-danger" onclick="deleteSelectedItem()" title="Delete Selected Item"><img src="~/images/delete.png" width="20" /></button>
					<button class="btn btn-success" onclick="saveSlide()" title="Save Slide"><img src="~/images/save.png" width="20" /></button>
					<button class="btn btn-success" onclick="exportToPDF()" title="Export To PDF"><img src="~/images/download.png" width="20" /></button>
				</div>
			</div>

			<div id="canvas-container" class="my-3" style="background: #FFF;">
				<canvas id="drawingCanvas" class="drawing-canvas" width="800" height="600" style="border-radius: 5px; border: 1px solid #0000001a; padding: 10px;"></canvas>
			</div>
		</div>
	</div>
	<div class="col-md-2 p-4" style="background: #0000000a; border-left: 1px solid #00000012;">
		<h6 class="pb-3 m-0" style="border-bottom: 1px solid #00000012;">Participants</h6>
		<ul id="userList" class="p-0">
			@foreach (var user in Model.Users)
			{
				<li class="d-flex justify-content-between">
					@user.Nickname (@user.Role)
					<div class="dropdown">
						<a class="" data-bs-toggle="dropdown" aria-expanded="false">
							<img src="~/images/three-dot.png" width="18" />
						</a>
						<ul class="dropdown-menu">
							<li><a class="dropdown-item" href="#">Viewer</a></li>
							<li><a class="dropdown-item" href="#">Editor</a></li>
						</ul>
					</div>
				</li>
			}
		</ul>
	</div>
</div>

@section Scripts {
	<script>
		$(document).tooltip();
		connection.start().then(function () {
			console.log("Connected to SignalR");
			const nickname = "@ViewBag.Nickname";
			const presentationId = @Model.PresentationId;
			connection.invoke("JoinPresentation", presentationId, nickname, "Viewer").catch(function (err) {
				console.error(err.toString());
			});
		});

		var canvas = new fabric.Canvas('drawingCanvas');
		var zoomFactor = 1;

		// Add Text Block
		function addTextBlock() {
			var text = new fabric.Textbox('Editable Text Block', {
				left: 50,
				top: 50,
				width: 200,
				height: 50,
				fontSize: 20,
				editable: true
			});
			canvas.add(text);
		}

		// Add Rectangle
		function addRectangle() {
			var rect = new fabric.Rect({
				left: 100,
				top: 100,
				fill: 'blue',
				width: 150,
				height: 100
			});
			canvas.add(rect);
		}

		// Add Circle
		function addCircle() {
			var circle = new fabric.Circle({
				left: 200,
				top: 200,
				radius: 50,
				fill: 'green'
			});
			canvas.add(circle);
		}

		// Add Arrow (using Line with an arrowhead)
		function addArrow() {
			var line = new fabric.Line([100, 100, 300, 100], {
				left: 50,
				top: 50,
				stroke: 'red',
				strokeWidth: 5,
				originX: 'center',
				originY: 'center'
			});
			var arrow = new fabric.Triangle({
				left: 300,
				top: 100,
				width: 20,
				height: 20,
				fill: 'red',
				angle: 0
			});
			canvas.add(line);
			canvas.add(arrow);
		}

		// Zoom In
		function zoomIn() {
			zoomFactor *= 1.1;
			canvas.setZoom(zoomFactor);
		}

		// Zoom Out
		function zoomOut() {
			zoomFactor /= 1.1;
			canvas.setZoom(zoomFactor);
		}

		// Clear Canvas
		function clearCanvas() {
			canvas.clear();
		}

		// Upload Image
		document.getElementById('imageUploader').addEventListener('change', function (e) {
			var reader = new FileReader();
			reader.onload = function (event) {
				fabric.Image.fromURL(event.target.result, function (img) {
					canvas.add(img);
				});
			};
			reader.readAsDataURL(e.target.files[0]);
		});
	</script>
}
